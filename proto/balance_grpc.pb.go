// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/balance.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetBalanceClient is the client API for GetBalance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetBalanceClient interface {
	GetWalletBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceReply, error)
}

type getBalanceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetBalanceClient(cc grpc.ClientConnInterface) GetBalanceClient {
	return &getBalanceClient{cc}
}

func (c *getBalanceClient) GetWalletBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceReply, error) {
	out := new(GetBalanceReply)
	err := c.cc.Invoke(ctx, "/balance.GetBalance/GetWalletBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetBalanceServer is the server API for GetBalance service.
// All implementations must embed UnimplementedGetBalanceServer
// for forward compatibility
type GetBalanceServer interface {
	GetWalletBalance(context.Context, *GetBalanceRequest) (*GetBalanceReply, error)
	mustEmbedUnimplementedGetBalanceServer()
}

// UnimplementedGetBalanceServer must be embedded to have forward compatible implementations.
type UnimplementedGetBalanceServer struct {
}

func (UnimplementedGetBalanceServer) GetWalletBalance(context.Context, *GetBalanceRequest) (*GetBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletBalance not implemented")
}
func (UnimplementedGetBalanceServer) mustEmbedUnimplementedGetBalanceServer() {}

// UnsafeGetBalanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetBalanceServer will
// result in compilation errors.
type UnsafeGetBalanceServer interface {
	mustEmbedUnimplementedGetBalanceServer()
}

func RegisterGetBalanceServer(s grpc.ServiceRegistrar, srv GetBalanceServer) {
	s.RegisterService(&GetBalance_ServiceDesc, srv)
}

func _GetBalance_GetWalletBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetBalanceServer).GetWalletBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/balance.GetBalance/GetWalletBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetBalanceServer).GetWalletBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetBalance_ServiceDesc is the grpc.ServiceDesc for GetBalance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetBalance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "balance.GetBalance",
	HandlerType: (*GetBalanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWalletBalance",
			Handler:    _GetBalance_GetWalletBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/balance.proto",
}
